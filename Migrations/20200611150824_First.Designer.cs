// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjektImplementacja.Model;

namespace ProjektImplementacja.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20200611150824_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjektImplementacja.Model.Atrakcja", b =>
                {
                    b.Property<int>("IdAtrakcja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Czas")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventIdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdPracownik")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PracownikIdPracownik")
                        .HasColumnType("int");

                    b.HasKey("IdAtrakcja");

                    b.HasIndex("EventIdEvent");

                    b.HasIndex("PracownikIdPracownik");

                    b.ToTable("Atrakcje");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Atrakcja");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Atrakcja_Uczestnik", b =>
                {
                    b.Property<int>("IdAtrakcja")
                        .HasColumnType("int");

                    b.Property<int>("IdUczestnik")
                        .HasColumnType("int");

                    b.HasKey("IdAtrakcja", "IdUczestnik");

                    b.HasIndex("IdUczestnik");

                    b.ToTable("Atrakcja_Uczestnicy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Bilet", b =>
                {
                    b.Property<int>("IdBilet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventIdEvent")
                        .HasColumnType("int");

                    b.Property<string>("Typ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UczestnikIdUczestnik")
                        .HasColumnType("int");

                    b.HasKey("IdBilet");

                    b.HasIndex("EventIdEvent");

                    b.HasIndex("UczestnikIdUczestnik");

                    b.ToTable("Bilety");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataRozpoczecia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataZakonczenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("IloscMiejsc")
                        .HasColumnType("int");

                    b.Property<int>("MiejsceEventuIdMiejsceEventu")
                        .HasColumnType("int");

                    b.Property<string>("NazwaEventu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizatorIdOrganizator")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tematyka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEvent");

                    b.HasIndex("MiejsceEventuIdMiejsceEventu");

                    b.HasIndex("OrganizatorIdOrganizator");

                    b.ToTable("Eventy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Event_Pracownik", b =>
                {
                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdPracownik")
                        .HasColumnType("int");

                    b.HasKey("IdEvent", "IdPracownik");

                    b.HasIndex("IdPracownik");

                    b.ToTable("Event_Pracownicy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Event_Wystawca", b =>
                {
                    b.Property<int>("IdWystawca")
                        .HasColumnType("int");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.HasKey("IdWystawca", "IdEvent");

                    b.HasIndex("IdEvent");

                    b.ToTable("Event_Wystawcy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.MiejsceEventu", b =>
                {
                    b.Property<int>("IdMiejsceEventu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WolneMiejsca")
                        .HasColumnType("int");

                    b.HasKey("IdMiejsceEventu");

                    b.ToTable("MiejscaEventu");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Nagroda", b =>
                {
                    b.Property<int>("IdNagroda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Wartosc")
                        .HasColumnType("real");

                    b.HasKey("IdNagroda");

                    b.ToTable("Nagrody");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Organizator", b =>
                {
                    b.Property<int>("IdOrganizator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("IdOrganizator");

                    b.ToTable("Organizatorzy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Pracownik", b =>
                {
                    b.Property<int>("IdPracownik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPracownik");

                    b.ToTable("Pracownicy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Uczestnik", b =>
                {
                    b.Property<int>("IdUczestnik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("IdUczestnik");

                    b.ToTable("Uczestnicy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Uzytkownik", b =>
                {
                    b.Property<int>("IdUzytkownik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("IdOrganizator")
                        .HasColumnType("int");

                    b.Property<int>("IdPracownik")
                        .HasColumnType("int");

                    b.Property<int>("IdUczestnik")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaUzytkownika")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerTelefonu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUzytkownik");

                    b.HasIndex("IdOrganizator")
                        .IsUnique();

                    b.HasIndex("IdPracownik")
                        .IsUnique();

                    b.HasIndex("IdUczestnik")
                        .IsUnique();

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Wystawca", b =>
                {
                    b.Property<int>("IdWystawca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DaneKontaktowe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaFirmy")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<float>("RozmiarStoiska")
                        .HasColumnType("real");

                    b.HasKey("IdWystawca");

                    b.ToTable("Wystawcy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Konkurs", b =>
                {
                    b.HasBaseType("ProjektImplementacja.Model.Atrakcja");

                    b.Property<int>("IdNagroda")
                        .HasColumnType("int");

                    b.HasIndex("IdNagroda")
                        .IsUnique()
                        .HasFilter("[IdNagroda] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Konkurs");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Panel", b =>
                {
                    b.HasBaseType("ProjektImplementacja.Model.Atrakcja");

                    b.Property<int>("IloscMiejsc")
                        .HasColumnType("int");

                    b.Property<string>("Miejsce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PanelKonkursowyIdAtrakcja")
                        .HasColumnType("int");

                    b.HasIndex("PanelKonkursowyIdAtrakcja");

                    b.HasDiscriminator().HasValue("Panel");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.PanelKonkursowy", b =>
                {
                    b.HasBaseType("ProjektImplementacja.Model.Panel");

                    b.Property<int>("IdKonkurs")
                        .HasColumnType("int");

                    b.HasIndex("IdKonkurs")
                        .IsUnique()
                        .HasFilter("[IdKonkurs] IS NOT NULL");

                    b.HasDiscriminator().HasValue("PanelKonkursowy");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Atrakcja", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Event", "Event")
                        .WithMany("Atrakcje")
                        .HasForeignKey("EventIdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Pracownik", "Pracownik")
                        .WithMany("Atrakcje")
                        .HasForeignKey("PracownikIdPracownik");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Atrakcja_Uczestnik", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Atrakcja", "Atrakcja")
                        .WithMany("Uczestnicy")
                        .HasForeignKey("IdAtrakcja")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Uczestnik", "Uczestnik")
                        .WithMany("Atrakcje")
                        .HasForeignKey("IdUczestnik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Bilet", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Event", "Event")
                        .WithMany("Bilety")
                        .HasForeignKey("EventIdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Uczestnik", "Uczestnik")
                        .WithMany("Bilety")
                        .HasForeignKey("UczestnikIdUczestnik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Event", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.MiejsceEventu", "MiejsceEventu")
                        .WithMany("Eventy")
                        .HasForeignKey("MiejsceEventuIdMiejsceEventu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Organizator", "Organizator")
                        .WithMany("Eventy")
                        .HasForeignKey("OrganizatorIdOrganizator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Event_Pracownik", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Event", "Event")
                        .WithMany("Pracownicy")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Pracownik", "Pracownik")
                        .WithMany("Eventy")
                        .HasForeignKey("IdPracownik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Event_Wystawca", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Event", "Event")
                        .WithMany("Wystawcy")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Wystawca", "Wystawca")
                        .WithMany("Eventy")
                        .HasForeignKey("IdWystawca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Uzytkownik", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Organizator", "Organizator")
                        .WithOne("Uzytkownik")
                        .HasForeignKey("ProjektImplementacja.Model.Uzytkownik", "IdOrganizator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Pracownik", "Pracownik")
                        .WithOne("Uzytkownik")
                        .HasForeignKey("ProjektImplementacja.Model.Uzytkownik", "IdPracownik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektImplementacja.Model.Uczestnik", "Uczestnik")
                        .WithOne("Uzytkownik")
                        .HasForeignKey("ProjektImplementacja.Model.Uzytkownik", "IdUczestnik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Konkurs", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Nagroda", "Nagroda")
                        .WithOne("Konkurs")
                        .HasForeignKey("ProjektImplementacja.Model.Konkurs", "IdNagroda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektImplementacja.Model.Panel", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.PanelKonkursowy", "PanelKonkursowy")
                        .WithMany()
                        .HasForeignKey("PanelKonkursowyIdAtrakcja");
                });

            modelBuilder.Entity("ProjektImplementacja.Model.PanelKonkursowy", b =>
                {
                    b.HasOne("ProjektImplementacja.Model.Konkurs", "Konkurs")
                        .WithOne("PanelKonkursowy")
                        .HasForeignKey("ProjektImplementacja.Model.PanelKonkursowy", "IdKonkurs")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
